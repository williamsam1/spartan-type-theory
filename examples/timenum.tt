Load "examples/lemmas.tt".

(** Beginning of Plus Time Analysis *)

(** Time to evaluate successor function application *)
Definition S_time := (fun (n : Nat) => CompEval (Time (Fmap S (Ret n))))
    : Nat -> Nat.
(** f 0 == 1 *)
Definition S_time_0 := (Refl (S Z))
    : Eq (S_time Z) (S Z).
(** f (S n) == 1 *)
Definition S_time_S := (fun (n : Nat) => (Refl (S Z)))
    : Π (n : Nat), Eq (S_time (S n)) (S Z).
(** f n == 1 *)
Definition S_time_eq := (fun (n : Nat) =>
    nat_ind (fun (n : Nat) => Eq (S_time n) (S Z))
    S_time_0
    (fun (n : Nat) (_ : Eq (S_time n) (S Z)) => S_time_S n)
    n)
    : Π (n : Nat), Eq (S_time n) (S Z).

(** Time to evaluate atomically defined addition *)
Definition plusTime := (fun (m n : Nat) => CompEval (Time (LiftA (Fmap ( + ) (Ret m)) (Ret n))))
    : Nat -> Nat -> Nat.

(** f 0 n == 2 *)
Definition plusTime0 := (fun (n : Nat) => Refl (S (S Z)))
    : Π (n : Nat), Eq (plusTime Z n) (S (S Z)).

(** f (S m) n == S (f m n) *)
Definition plusTimeS := (fun (m n : Nat) => Refl (plusTime (S m) n))
    : Π (m n : Nat), Eq (plusTime (S m) n) (S (plusTime m n)).

(** g m = m + 2 *)
Definition plusTimeSimpl := (fun (n : Nat) => n + 2)
    : Nat -> Nat.

(** g m = f m 0 *)
Definition plusTimeSimplEq :=
    (nat_ind (fun (n : Nat) => Eq (plusTimeSimpl n) (plusTime n Z))
        (plusTime0 Z)
        (fun (n : Nat) (p : Eq (plusTimeSimpl n) (plusTime n Z)) =>
            trans Nat (plusTimeSimpl (S n)) (S (plusTime n Z)) (plusTime (S n) Z)
                (ap Nat Nat S (plusTimeSimpl n) (plusTime n Z) p)
                (sym Nat (plusTime (S n) Z) (S (plusTime n Z)) (plusTimeS n Z))
        )
    )
    : Π (n : Nat), Eq (plusTimeSimpl n) (plusTime n Z).

(** f m n1 == f m n2 *)
Definition plusTimeSecondEq :=
    (nat_ind (fun (m : Nat) => Π (n1 n2 : Nat), Eq (plusTime m n1) (plusTime m n2))
        (fun (n1 n2 : Nat) => trans Nat (plusTime Z n1) (S (S Z)) (plusTime Z n2) (plusTime0 n1) (sym Nat (plusTime Z n2) (S (S Z)) (plusTime0 n2)))
        (fun (m : Nat) (p : Π (n1 n2 : Nat), Eq (plusTime m n1) (plusTime m n2)) (n1 n2 : Nat) => 
            trans2 Nat (plusTime (S m) n1) (S (plusTime m n1)) (S (plusTime m n2)) (plusTime (S m) n2)
                (plusTimeS m n1)
                (ap Nat Nat S (plusTime m n1) (plusTime m n2) (p n1 n2))
                (sym Nat (plusTime (S m) n2) (S (plusTime m n2)) (plusTimeS m n2)))
    )
    : Π (m n1 n2 : Nat), Eq (plusTime m n1) (plusTime m n2).

(** f m n == m + 2 *)
Definition plusTimeEq := (irrelev Nat Nat Nat plusTime plusTimeSimpl Z plusTimeSecondEq plusTimeSimplEq)
    : Π (m n : Nat), Eq (plusTimeSimpl m) (plusTime m n).

(** End of Plus Time Analysis *)

(** Beginning of Multiply Time Analysis *)

(** Time to evaluate recursively defined multiplication *)
Definition multTime := (fun (m n : Nat) => CompEval (Time (LiftA (Fmap ( * ) (Ret m)) (Ret n)))) 
	: Nat -> Nat -> Nat.
Definition multTimeExplicit := (fun (m n : Nat) => 2 + (5 * m) + (m * n))
	: Nat -> Nat -> Nat. 

(** f(0,n) == 2 *)
Definition multTime0 := (fun (n : Nat) => Refl 2)
    : Π (n : Nat), Eq (multTime 0 n) 2.

(** Time to evaluate first argument of multiplication *)
Definition multArg1Time := (fun (m : Nat) => CompEval (Time (Fmap ( * ) (Ret m))))
    : Nat -> Nat.

(** Normalized form of multiplication runtime *)
Definition multTimeDef := (fun (m n : Nat) => Refl (multTime m n))
    : Π (m n : Nat),
        Eq
            (multTime m n)
            ((multArg1Time m + 0)
                + ((m * n) + 0)).

(** Time to apply first argument of multiplication *)
Definition multIndTime := (fun (m : Nat) => CompEval (time_nat_rec 0 (Nat -> Nat)
    (fun (_ : Nat) => Z)
    (fun (f : Nat -> Nat) (n : Nat) => n + (f n))
    m))
       : Nat -> Nat.

(** g(0) == 0 *)
Definition multIndTime0 := (Refl 0)
    : Eq (multIndTime 0) 0.

(**
    g(m+1) == g(m) + (S ((g(m) + g(m)) + (S (g(m) + 0))))
           == 2 + 4 * g(m)
*)
Definition multIndTimeS := (fun (m : Nat) => Refl (multIndTime (1 + m)))
    : forall (m : Nat),
        Eq
            (multIndTime (1 + m))
            (multIndTime m + S ((multIndTime m + multIndTime m) + (1 + multIndTime m + 0))).

Definition rearrange := (fun (m : Nat) =>
    let eq1 : Eq (S (m + 0)) (S m)
        := ap Nat Nat S (m + 0) m (plus_comm (m) 0)
    in
    let eq2 : Eq ((m + m) + (S (m + 0))) ((m + m) + (S m))
        := ap Nat Nat (( + ) (m + m)) (S (m + 0)) (S m) eq1
    in
    let eq3 : Eq ((m + m) + (S m)) (S (m + (m + m)))
        := plus_comm (m + m) (S m)
    in
    let eq4 : Eq ((m + m) + (S (m + 0))) (S (m + (m + m)))
        := trans Nat ((m + m) + (S (m + 0))) ((m + m) + (S m)) (S (m + (m + m))) eq2 eq3
    in
    let eq5 : Eq (S ((m + m) + (S (m + 0)))) (S (S (m + (m + m))))
        := ap Nat Nat S ((m + m) + (S (m + 0))) (S (m + (m + m))) eq4
    in
    let eq6 : Eq (m + S ((m + m) + (S (m + 0)))) (m + S (S (m + (m + m))))
        := ap Nat Nat (( + ) m) (S ((m + m) + (S (m + 0)))) (S (S (m + (m + m)))) eq5
    in
    let eq7 : Eq (m + S (S (m + (m + m)))) (S (S (m + (m + m))) + m)
        := plus_comm m (S (S (m + (m + m))))
    in
    let eq8 : Eq (m + S ((m + m) + (S (m + 0)))) (2 + ((m + (m + m)) + m))
        := trans Nat (m + S ((m + m) + (S (m + 0)))) (m + S (S (m + (m + m)))) (S (S (m + (m + m))) + m) eq6 eq7
    in
    let eq9 : Eq ((m + (m + m)) + m) (m + (m + (m + m)))
        := plus_comm (m + (m + m)) m
    in
    let eq10 : Eq ((m + (m + m)) + m) (4 * m)
        := tp Nat (fun (x : Nat) => Eq ((m + (m + m)) + m) (m + (m + (m + x)))) m (m + 0) (plus_comm 0 m) eq9
    in
    let eq11 : Eq (2 + (m + (m + m)) + m) (2 + 4 * m)
        := ap Nat Nat S2 ((m + (m + m)) + m) (4 * m) eq10
    in
    trans Nat (m + S ((m + m) + (S (m + 0)))) (2 + ((m + (m + m)) + m)) (2 + 4 * m) eq8 eq11)
    : forall (m : Nat), Eq (m + S ((m + m) + (S (m + 0)))) (2 + 4 * m).

(**
f(m,n)   == 2 + 5 * m + m * n

f(0,0)   == 2
f(m+1,n) == 5 + n + f(m,n)
f(m,n+1) == m + f(m,n)
*)

(** End of Multiply Time Analysis *)