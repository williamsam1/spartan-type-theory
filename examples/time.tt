Definition fmap := (fun (A : Type) (B : A -> Type)
    (f : forall (x : A), B x) (a : Comp A) => Fmap f a)
    : forall (A : Type) (B : A -> Type),
        (forall (x : A), B x) -> forall (a : Comp A), Comp (B (CompEval a)).
Definition liftA := (fun (A : Type) (B : A -> Type)
    (f : Comp (forall (x : A), B x)) (a : Comp A) => LiftA f a)
    : forall (A : Type) (B : A -> Type),
        Comp (forall (x : A), B x) -> forall (a : Comp A), Comp (B (CompEval a)).
Definition ret := (fun (A : Type) (a : A) => Ret a)
	: forall (A : Type), A -> Comp A.
Definition eval := (fun (A : Type) (a : Comp A) => CompEval a)
	: forall (A : Type), Comp A -> A.

Definition id := (fun (A : Type) (x : A) => x) : forall (A : Type), A -> A.

Definition ret_id := Ret id : Comp (forall (A : Type), A -> A).
Eval ret_id.

Definition eval_ret_id := CompEval ret_id : forall (A : Type), A -> A.
Eval eval_ret_id.

Definition comp := (Fmap id (Ret Nat)) : Comp (Nat -> Nat).
Check comp.
Eval comp.
Eval (CompEval comp).

Definition time := (Time comp) : Comp Nat.
Check time.
Eval time.

Definition evalTime := (CompEval time) : Nat.
Check evalTime.
Eval evalTime.