Definition fmap := (fun (A : Type) (B : A -> Type)
    (f : forall (x : A), B x) (a : App A) => Fmap f a)
    : forall (A : Type) (B : A -> Type),
        (forall (x : A), B x) -> forall (a : App A), App (B (AppEval a)).
Definition liftA := (fun (A : Type) (B : A -> Type)
    (f : App (forall (x : A), B x)) (a : App A) => LiftA f a)
    : forall (A : Type) (B : A -> Type),
        App (forall (x : A), B x) -> forall (a : App A), App (B (AppEval a)).
Definition bind := (fun (A : Type) (B : A -> Type)
    (f : forall (x : A), App (B x)) (a : App A) => Bind f a)
    : forall (A : Type) (B : A -> Type),
        (forall (x : A), App (B x)) -> forall (a : App A), App (B (AppEval a)).
Definition ret := (fun (A : Type) (a : A) => Ret a)
	: forall (A : Type), A -> App A.
Definition eval := (fun (A : Type) (a : App A) => AppEval a)
	: forall (A : Type), App A -> A.

Definition id := (fun (A : Type) (x : A) => x) : forall (A : Type), A -> A.

Definition ret_id := Ret id : App (forall (A : Type), A -> A).
Eval ret_id.

Definition eval_ret_id := AppEval ret_id : forall (A : Type), A -> A.
Eval eval_ret_id.

(** Propositional equality for evaluation of held applications *)

(** eval (ret a) = a *)
Definition eval_ret := (fun (A : Type) (a : A) => refl a)
	: forall (A : Type) (a : A), Eq (AppEval (Ret a)) a.
Check eval_ret.

(** eval (fmap f a) = f (eval a) *)
Definition eval_fmap := (fun (A : Type) (B : A -> Type)
	(f : forall (x : A), B x) (a : App A) => refl (f (AppEval a)))
	: forall (A : Type) (B : A -> Type) (f : forall (x : A), B x) (a : App A),
		Eq (AppEval (Fmap f a)) (f (AppEval a)).
Check eval_fmap.

(** eval (liftA f a) = (eval f) (eval a) *)
Definition eval_liftA := (fun (A : Type) (B : A -> Type)
	(f : App (forall (x : A), B x)) (a : App A) => refl ((AppEval f) (AppEval a)))
	: forall (A : Type) (B : A -> Type) (f : App (forall (x : A), B x)) (a : App A),
		Eq (AppEval (LiftA f a)) ((AppEval f) (AppEval a)).
Check eval_liftA.

(** eval (bind f a) = eval (f (eval a)) *)
Definition eval_bind := (fun (A : Type) (B : A -> Type)
	(f : forall (x : A), App (B x)) (a : App A) => refl (AppEval (f (AppEval a))))
	: forall (A : Type) (B : A -> Type) (f : forall (x : A), App (B x)) (a : App A),
		Eq (AppEval (Bind f a)) (AppEval (f (AppEval a))).
Check eval_bind.

